package com.example.obsqura

import android.Manifest
import android.annotation.SuppressLint
import android.bluetooth.*
import android.bluetooth.le.BluetoothLeScanner
import android.bluetooth.le.ScanCallback
import android.bluetooth.le.ScanResult
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.location.LocationManager
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import com.example.obsqura.ui.theme.BLECommunicatorTheme
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : ComponentActivity() {

    private lateinit var bluetoothAdapter: BluetoothAdapter
    private lateinit var bleConnectionManager: BLEConnectionManager
    private var bluetoothLeScanner: BluetoothLeScanner? = null

    // Ïä§Ï∫î ÏÉÅÌÉú/Ìï∏Îì§Îü¨/ÏΩúÎ∞±ÏùÑ "Ï†ÑÏó≠ 1Í∞ú"Îßå Ïú†ÏßÄ
    private var isScanning = false
    private val handler = Handler(Looper.getMainLooper())
    private var onDeviceFound: ((CustomBluetoothDevice) -> Unit)? = null

    // ScanCallback Ïû¨ÏÇ¨Ïö© (APPLICATION_REGISTRATION_FAILED(2) Î∞©ÏßÄ)
    private val scanCallback = object : ScanCallback() {
        override fun onScanResult(callbackType: Int, result: ScanResult) {
            val device = result.device
            // Android 12+ÏóêÏÑú device.name Ï†ëÍ∑ºÏùÄ BLUETOOTH_CONNECT Í∂åÌïú ÌïÑÏöîÌï† Ïàò ÏûàÏñ¥ try/catch
            val deviceName = try {
                device.name ?: result.scanRecord?.deviceName ?: "Ïù¥Î¶Ñ ÏóÜÏùå"
            } catch (se: SecurityException) {
                Log.w("BLE_SCAN", "device.name access denied: ${se.message}")
                "Ïù¥Î¶Ñ ÏóÜÏùå"
            }
            Log.d("BLE_SCAN", "üì° Î∞úÍ≤¨: $deviceName (${device.address}), rssi=${result.rssi}")
            onDeviceFound?.invoke(CustomBluetoothDevice(device, deviceName))
        }

        override fun onScanFailed(errorCode: Int) {
            Log.e("BLE_SCAN", "‚ùå Ïä§Ï∫î Ïã§Ìå®: $errorCode")
        }
    }

    // -------- Í∂åÌïú Ï≤òÎ¶¨ --------
    private val requestPermissionsLauncher =
        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { perms ->
            // Î™®Îì† Í∂åÌïúÏù¥ ÌóàÏö©ÎêòÏóàÎäîÏßÄ ÌôïÏù∏
            val granted = perms.values.all { it }
            if (granted) {
                // Í∂åÌïú ÌóàÏö© ÏßÅÌõÑ Ïä§Ï∫î Ïû¨ÏãúÏûë(ÏΩúÎ∞±ÏùÄ UI Ï™ΩÏóêÏÑú Îã§Ïãú ÏÑ§Ï†ïÎêòÎØÄÎ°ú no-opÎ°ú ÏïàÏ†Ñ Ìò∏Ï∂ú)
                startBleScan { /* no-op; Ïã§Ï†ú UI setContent ÎÇ¥ÏóêÏÑú ÏÑ§Ï†ïÎê® */ }
            } else {
                Toast.makeText(this, "Í∂åÌïúÏù¥ ÏóÜÏñ¥ Ïä§Ï∫îÌï† Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            }
        }

    private fun hasScanPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) == PackageManager.PERMISSION_GRANTED &&
                    ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) == PackageManager.PERMISSION_GRANTED &&
                    // ÏùºÎ∂Ä Í∏∞Í∏∞ Ìò∏ÌôòÏÑ±: ÏúÑÏπò Í∂åÌïúÏùÑ ÏöîÍµ¨ÌïòÎäî Í≤ΩÏö∞Í∞Ä ÏûàÏñ¥ Ìï®Íªò ÌôïÏù∏
                    ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
        } else {
            ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
        }
    }

    private fun requestPermissionsIfNeeded() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            requestPermissionsLauncher.launch(
                arrayOf(
                    Manifest.permission.BLUETOOTH_SCAN,
                    Manifest.permission.BLUETOOTH_CONNECT,
                    Manifest.permission.ACCESS_FINE_LOCATION // Ìò∏ÌôòÏÑ± Í≥†Î†§(ÏùºÎ∂Ä Í∏∞Í∏∞)
                )
            )
        } else {
            requestPermissionsLauncher.launch(
                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION)
            )
        }
    }

    // Android 12 ÎØ∏ÎßåÏóêÏÑúÎßå ÏúÑÏπò ÏÑúÎπÑÏä§Í∞Ä Ïä§Ï∫î ÏÑ±Í≥µÏóê Í¥ÄÏó¨
    private fun isLocationEnabled(): Boolean {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) return true
        val lm = getSystemService(Context.LOCATION_SERVICE) as LocationManager
        return lm.isProviderEnabled(LocationManager.GPS_PROVIDER) ||
                lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)
    }

    // -------- ÏÉùÎ™ÖÏ£ºÍ∏∞ --------
    @SuppressLint("MissingPermission", "ServiceCast")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothAdapter = bluetoothManager.adapter
        bluetoothLeScanner = bluetoothAdapter.bluetoothLeScanner

        var publicKeyBase64 by mutableStateOf<String?>(null)
        var logMessages by mutableStateOf<List<String>>(emptyList())

        fun addLog(msg: String) {
            logMessages = (logMessages + msg).takeLast(100)
            if (msg.contains("LED Î™ÖÎ†π Ï†ÑÏ≤¥ Ï†ÑÏÜ° ÏôÑÎ£å")) {
                Toast.makeText(this@MainActivity, "LED Î™ÖÎ†π Ï†ÑÏÜ°Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!", Toast.LENGTH_SHORT).show()
            }
        }

        bleConnectionManager = BLEConnectionManager(
            this,
            onPublicKeyReceived = { base64 ->
                publicKeyBase64 = base64
                addLog("üì• Í≥µÍ∞úÌÇ§ ÏàòÏã† ÏôÑÎ£å")
            },
            logCallback = { msg -> addLog(msg) }
        )

        // ÏµúÏ¥à ÏßÑÏûÖ Ïãú Í∂åÌïú ÏöîÏ≤≠
        requestPermissionsIfNeeded()

        setContent {
            BLECommunicatorTheme {
                val pink = Color(0xFFE91E63)
                val green = Color(0xFF4CAF50)
                val lightGreenBg = Color(0xFFE8F5E9)

                var scannedDevices by remember { mutableStateOf<List<CustomBluetoothDevice>>(emptyList()) }
                var connectedDevice by remember { mutableStateOf<BluetoothDevice?>(null) }
                var connectedTime by remember { mutableStateOf<String?>(null) }
                var ledOn by remember { mutableStateOf(false) }

                Surface(modifier = Modifier.fillMaxSize(), color = Color.White) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Text(
                            "BLE Ïä§Ï∫êÎÑà",
                            style = MaterialTheme.typography.headlineMedium.copy(color = Color.Black)
                        )
                        Spacer(modifier = Modifier.height(8.dp))

                        connectedDevice?.let { device ->
                            Text("‚úÖ Connected Device:", color = Color.DarkGray)
                            Text("‚Ä¢ Name: ${device.name ?: "Unknown"}", color = pink)
                            Text("‚Ä¢ Address: ${device.address}", color = pink)
                            connectedTime?.let { Text("‚Ä¢ Connected at: $it", color = pink) }
                            Spacer(modifier = Modifier.height(12.dp))
                        }

                        // ----- Ïä§Ï∫î Î≤ÑÌäº -----
                        Button(
                            onClick = {
                                if (!hasScanPermission()) {
                                    requestPermissionsIfNeeded()
                                    Toast.makeText(this@MainActivity, "Ïä§Ï∫î Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                                    return@Button
                                }
                                if (!isLocationEnabled()) {
                                    Toast.makeText(this@MainActivity, "Ìú¥ÎåÄÌè∞ ÏúÑÏπò ÏÑúÎπÑÏä§Î•º ÏºúÏ£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
                                    return@Button
                                }
                                if (!bluetoothAdapter.isEnabled) {
                                    startActivity(Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE))
                                    return@Button
                                }

                                scannedDevices = emptyList()
                                startBleScan { customDevice ->
                                    scannedDevices = (scannedDevices + customDevice)
                                        .distinctBy { it.device.address }
                                        .sortedByDescending {
                                            it.displayName == "RPi-LED" ||
                                                    it.device.address.uppercase() == "04:7F:0E:78:E8:B0"
                                        }
                                }
                            },
                            modifier = Modifier.fillMaxWidth(),
                            colors = ButtonDefaults.buttonColors(containerColor = pink)
                        ) { Text("üîç BLE ÎîîÎ∞îÏù¥Ïä§ Ïä§Ï∫î") }

                        Spacer(modifier = Modifier.height(16.dp))

                        LazyColumn(modifier = Modifier.fillMaxHeight().weight(1f)) {
                            items(scannedDevices) { customDevice ->
                                val isRPi = customDevice.displayName == "RPi-LED" ||
                                        customDevice.device.address.uppercase() == "04:7F:0E:78:E8:B0"

                                Card(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(vertical = 4.dp),
                                    colors = CardDefaults.cardColors(
                                        containerColor = if (isRPi) lightGreenBg else Color.White
                                    ),
                                    elevation = CardDefaults.cardElevation(6.dp)
                                ) {
                                    Column(modifier = Modifier.padding(12.dp)) {
                                        Text(
                                            "Ïù¥Î¶Ñ: ${customDevice.displayName} ${if (isRPi) "üåø RPi" else ""}",
                                            color = if (isRPi) green else pink
                                        )
                                        Text(
                                            "Ï£ºÏÜå: ${customDevice.device.address}",
                                            color = if (isRPi) green else Color.DarkGray
                                        )
                                        Spacer(modifier = Modifier.height(8.dp))

                                        Row {
                                            Button(
                                                onClick = {
                                                    bleConnectionManager.connect(customDevice.device)
                                                    connectedDevice = customDevice.device
                                                    connectedTime = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
                                                },
                                                modifier = Modifier.padding(end = 8.dp),
                                                colors = ButtonDefaults.buttonColors(containerColor = pink)
                                            ) { Text("üîå Ïó∞Í≤∞") }

                                            Button(
                                                onClick = {
                                                    bleConnectionManager.disconnect()
                                                    connectedDevice = null
                                                    connectedTime = null
                                                },
                                                colors = ButtonDefaults.buttonColors(containerColor = Color.Gray)
                                            ) { Text("üîå Ìï¥Ï†ú") }
                                        }

                                        Spacer(modifier = Modifier.height(8.dp))

                                        Row {
                                            Button(
                                                onClick = { bleConnectionManager.sendRawLedCommand("LED_ON") },
                                                modifier = Modifier.weight(1f),
                                                colors = ButtonDefaults.buttonColors(containerColor = pink)
                                            ) { Text("üß™ ÏàòÎèô LED ON") }

                                            Spacer(modifier = Modifier.width(8.dp))

                                            Button(
                                                onClick = { bleConnectionManager.sendRawLedCommand("LED_OFF") },
                                                modifier = Modifier.weight(1f),
                                                colors = ButtonDefaults.buttonColors(containerColor = pink)
                                            ) { Text("üß™ ÏàòÎèô LED OFF") }
                                        }

                                        Spacer(modifier = Modifier.height(8.dp))

                                        Row {
                                            Button(
                                                onClick = {
                                                    bleConnectionManager.sendEncryptedLedCommand(if (ledOn) "LED_OFF" else "LED_ON")
                                                    bleConnectionManager.logSharedKey()
                                                    ledOn = !ledOn
                                                },
                                                modifier = Modifier.weight(1f),
                                                colors = ButtonDefaults.buttonColors(containerColor = pink)
                                            ) { Text(if (ledOn) "üåô ÏïîÌò∏ LED OFF" else "üí° ÏïîÌò∏ LED ON") }
                                        }

                                        Spacer(modifier = Modifier.height(8.dp))

                                        Button(
                                            onClick = {
                                                val serviceUUID = UUID.fromString("0000ffe0-0000-1000-8000-00805f9b34fb")
                                                val charUUID = UUID.fromString("0000ffe1-0000-1000-8000-00805f9b34fb")
                                                bleConnectionManager.sendData(serviceUUID, charUUID, "KYBER_REQ".toByteArray())
                                            },
                                            colors = ButtonDefaults.buttonColors(containerColor = pink),
                                            modifier = Modifier.fillMaxWidth()
                                        ) { Text("üîê Í≥µÍ∞úÌÇ§ ÏöîÏ≤≠") }

                                        Spacer(modifier = Modifier.height(8.dp))

                                        Button(
                                            onClick = {
                                                val serviceUUID = UUID.fromString("0000ffe0-0000-1000-8000-00805f9b34fb")
                                                val charUUID = UUID.fromString("0000ffe1-0000-1000-8000-00805f9b34fb")
                                                bleConnectionManager.sendData(serviceUUID, charUUID, byteArrayOf(0x04, 0x00, 0x00, 0x01))
                                            },
                                            colors = ButtonDefaults.buttonColors(containerColor = pink),
                                            modifier = Modifier.fillMaxWidth()
                                        ) { Text("üì∂ Ping ÌÖåÏä§Ìä∏") }

                                        publicKeyBase64?.let {
                                            Spacer(modifier = Modifier.height(12.dp))
                                            Text("üìÑ Í≥µÍ∞úÌÇ§ (Base64):", color = Color.Gray)
                                            Text(it, color = Color.DarkGray, modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(8.dp))
                                        }

                                        Spacer(modifier = Modifier.height(8.dp))

                                        Text("üìú BLE Î°úÍ∑∏:", style = MaterialTheme.typography.titleSmall, color = Color.Gray)
                                        LazyColumn(modifier = Modifier.fillMaxWidth().height(120.dp)) {
                                            items(logMessages) { log -> Text(log, style = MaterialTheme.typography.bodySmall) }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // -------- Ïä§Ï∫î Ï†úÏñ¥ --------
    @SuppressLint("MissingPermission")
    private fun startBleScan(onFound: (CustomBluetoothDevice) -> Unit) {
        onDeviceFound = onFound
        if (isScanning) return

        if (!hasScanPermission()) {
            requestPermissionsIfNeeded()
            Toast.makeText(this, "Ïä§Ï∫î Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
            return
        }
        if (!isLocationEnabled()) {
            Toast.makeText(this, "Ìú¥ÎåÄÌè∞ ÏúÑÏπò ÏÑúÎπÑÏä§Î•º ÏºúÏ£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
            return
        }
        if (!bluetoothAdapter.isEnabled) {
            startActivity(Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE))
            return
        }

        val scanner = bluetoothLeScanner ?: run {
            Log.e("BLE_SCAN", "scanner is null")
            return
        }

        // ÏïàÏ†ÑÏùÑ ÏúÑÌï¥ ÏãúÏûë Ï†ÑÏóê stop ÌïúÎ≤à
        runCatching { scanner.stopScan(scanCallback) }

        // Lint ÏöîÍµ¨: SecurityException ÎåÄÎπÑ
        try {
            scanner.startScan(scanCallback)
            isScanning = true
            handler.postDelayed({ stopBleScan() }, 10_000)
        } catch (se: SecurityException) {
            Log.e("BLE_SCAN", "startScan SecurityException: ${se.message}")
            Toast.makeText(this, "Ïä§Ï∫î Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏñ¥ Ïã§ÌñâÌï† Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    }

    @SuppressLint("MissingPermission")
    private fun stopBleScan() {
        if (!isScanning) return
        bluetoothLeScanner?.let { runCatching { it.stopScan(scanCallback) } }
        isScanning = false
        // Î∞îÎ°ú Ïû¨ÏãúÏûë Ïãú 2 ÏóêÎü¨ Î∞©ÏßÄÏö© Ïø®Îã§Ïö¥
        handler.postDelayed({ /* ready */ }, 300)
    }
}

data class CustomBluetoothDevice(val device: BluetoothDevice, val displayName: String)

